// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Collection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name  String
    order Int
    tasks Task[]

    @@index([name])
}

model Task {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?
    completed   Boolean             @default(false)
    onComplete  CompleteOptionType?
    order       Int
    dueDate     DateTime?
    priority    PriorityOption?
    recurrence  RecurrenceOption?

    collection   Collection? @relation(fields: [collectionId], references: [id])
    collectionId String?

    checklist Checklist[]

    comments Comment[]

    @@index([title])
    @@index([completed])
    @@index([dueDate])
}

model Checklist {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text      String
    completed Boolean @default(false)
    order     Int

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String

    @@index([text])
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    text       String
    postedDate DateTime @default(now())

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String

    @@index([text])
}

model WeighIn {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date              DateTime
    weight            Float
    bodyFatPercentage Float?

    // weightProgress     Float
    // weightTotalChange  Float
    // weightToGoal       Float
    // bodyFatProgress    Float?
    // bodyFatTotalChange Float?
    // previousWeighInId  String?
}

model WeightGoal {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    weight Float
}

model BloodPressureReading {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date      DateTime
    systolic  Int
    diastolic Int
    pulse     Int?

    category BloodPressureCategory
}

enum BloodPressureCategory {
    Low
    Normal
    Elevated
    Hypertension_1
    Hypertension_2
    Hypertension_crisis
}

enum PriorityOption {
    Urgent
    Important
}

enum RecurrenceOption {
    Daily
    Weekly
    Monthly
    Yearly
}

enum CompleteOptionType {
    Simple
    Note
    Weigh_in
    Blood_pressure_reading
    Runners_log
}

// enum WeatherType {
//     Cold
//     Rainy
//     Fair
//     Hot
// }

// enum MoodType {
//     Bad
//     Okay
//     Good
//     Great
// }
